#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""pyxie command line tool"""

import sys
import glob
import os
import optparse
import time
from pyxie import sprite, packer

white, black, red, green, yellow, blue, purple = range(89, 96)
def color(string, color=green, bold=True):
    return '\033[%s%sm' % ('01;' if bold else '', color) + str(string) + '\033[0m'

def css_comment():
    style_comment = """/* generated by pyxie on %(ts)s\n * %(cmd)s\n */\n"""
    return style_comment % dict(
        ts = time.ctime(),
        cmd = ' '.join(sys.argv),
    )

def err(string):
    if not string.endswith('\n'):
        string = string + '\n'
    sys.stderr.write(color("Error: ", red) + str(string))
    sys.exit(-1)

def main():
    opts, args = parse_args()
    spritepath, paths = args[0], args[1:]

    fieldcls = packer.VerticalField if opts.vertical else packer.Field
    s = sprite_from_paths(*paths, **dict(fieldcls=fieldcls))
    # options
    spriteurl = opts.sprite_url if opts.sprite_url else None
    genstyle = s.sass if opts.sass else s.css

    # save the sprite image
    s.write(spritepath)

    # write the style out
    if opts.css:
        comment = css_comment()
        f = open(opts.css, 'w')
        f.write(comment)
        f.write(genstyle(spriteurl))
    else:
        print css_comment()
        print genstyle(spriteurl)

    # write optional html example file
    if opts.html:
        open(opts.html, 'w').write(s.html())
    return 0

def read_image_list(path):
    """Read a list of images from a file instead of taking it on the command
    line.  Ignores lines starting with # and lines without any text on them."""
    images = map(str.strip, open(path).readlines())
    images = [i for i in images if i and not i.startswith('#')]
    return images

def parse_args():
    parser = optparse.OptionParser(version='0.1', usage='%prog [opts] spritefile <images>')
    parser.set_conflict_handler("resolve")
    parser.add_option('-c', '--css', help='css output file (default stdout)')
    parser.add_option('', '--sass', action='store_true', help='output style as sass mixins')
    parser.add_option('', '--sprite-url', help='url to the sprite')
    parser.add_option('-h', '--html', help='html output file (default none)')
    parser.add_option('-v', '--vertical', action='store_true',
            help='pack images vertically only (for x-repeat)')
    parser.add_option('-i', '--images', help='read images to use from a text file')

    # parser.add_option('', '--class-prefix', help='css class prefix')
    opts, args = parser.parse_args()
    if not args:
        err("You must provide a path for the sprite-file")
    if not opts.images and len(args) < 2:
        err("You can't make a sprite without images")
    if opts.images and len(args) > 1:
        err("You cannot define an image file and give images on the command line")
    if opts.images:
        args += read_image_list(opts.images)
    return opts, args

def sprite_from_paths(*paths, **kwargs):
    from PIL import Image
    images = [Image.open(f) for f in paths]
    field = sprite.autopack(*images, **kwargs)
    return sprite.Sprite(field)


if __name__ == '__main__':
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        pass

